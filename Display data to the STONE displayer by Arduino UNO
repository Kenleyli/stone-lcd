https://www.stoneitech.com/news/sharing/how-to-display-data-read-by-mfrc522-through-stone-lcd-with-arduino.html

/*

 * --------------------------------------------------------------------------------------------------------------------

 * Example sketch/program showing how to read new NUID from a PICC to serial.

 * --------------------------------------------------------------------------------------------------------------------

 * This is a MFRC522 library example; for further details and other examples see: https://github.com/miguelbalboa/rfid

 *

 * Example sketch/program showing how to the read data from a PICC (that is: a RFID Tag or Card) using a MFRC522 based RFID

 * Reader on the Arduino SPI interface.

 *

 * When the Arduino and the MFRC522 module are connected (see the pin layout below), load this sketch into Arduino IDE

 * then verify/compile and upload it. To see the output: use Tools, Serial Monitor of the IDE (hit Ctrl+Shft+M). When

 * you present a PICC (that is: a RFID Tag or Card) at reading distance of the MFRC522 Reader/PCD, the serial output

 * will show the type, and the NUID if a new card has been detected. Note: you may see "Timeout in communication" messages

 * when removing the PICC from reading distance too early.

 *

 * @license Released into the public domain.

 *

*/

 

#include

#include

 

#define read_card_addr          0x01

#define read_num_addr           0x04

 

 

unsigned char read_card_status[8]= {0xA5, 0x5A, 0x05, 0x82,\

                                   0x00, read_card_addr, 0x00, 0x00};

unsigned char read_card_num[10]=       {0xA5, 0x5A, 0x07, 0x82, 0x00, \

                                   read_num_addr,  0x00, 0x00,0x00,0x00};

 

 

 

#define SS_PIN 10

#define RST_PIN 9

 

MFRC522 rfid(SS_PIN, RST_PIN); // Instance of the class

 

MFRC522::MIFARE_Key key;

 

// Init array that will store new NUID

byte nuidPICC[4];

 

void setup() {

  Serial.begin(115200);

  SPI.begin(); // Init SPI bus

  rfid.PCD_Init(); // Init MFRC522

 

  for (byte i = 0; i < 6; i++) {

    key.keyByte[i] = 0xFF;

  }

 

//  Serial.println(F("This code scan the MIFARE Classsic NUID."));

//  Serial.print(F("Using the following key:"));

//  printHex(key.keyByte, MFRC522::MF_KEY_SIZE);

}

 

void loop() {

 

  // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.

  if ( ! rfid.PICC_IsNewCardPresent())

    return;

 

  // Verify if the NUID has been readed

  if ( ! rfid.PICC_ReadCardSerial())

    return;

 

 // Serial.print(F("PICC type: "));

  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);

//  Serial.println(rfid.PICC_GetTypeName(piccType));

 

  // Check is the PICC of Classic MIFARE type

  if (piccType != MFRC522::PICC_TYPE_MIFARE_MINI &&  

    piccType != MFRC522::PICC_TYPE_MIFARE_1K &&

    piccType != MFRC522::PICC_TYPE_MIFARE_4K) {

   // Serial.println(F("Your tag is not of type MIFARE Classic."));

    return;

  }

 

  if (rfid.uid.uidByte[0] != nuidPICC[0] ||

    rfid.uid.uidByte[1] != nuidPICC[1] ||

    rfid.uid.uidByte[2] != nuidPICC[2] ||

    rfid.uid.uidByte[3] != nuidPICC[3] ) {

   // Serial.println(F("A new card has been detected."));

     read_card_status[7]=0x01;

     Serial.write(read_card_status,8);

    // Store NUID into nuidPICC array

    for (byte i = 0; i < 4; i++) {

      nuidPICC[i] = rfid.uid.uidByte[i];

    }

 

    read_card_num[6]=rfid.uid.uidByte[0];

    read_card_num[7]=rfid.uid.uidByte[1];

    read_card_num[8]=rfid.uid.uidByte[2];

    read_card_num[9]=rfid.uid.uidByte[3];

    Serial.write(read_card_num,10);

   // Serial.println(F("The NUID tag is:"));

   // Serial.print(F("In hex: "));

   // printHex(rfid.uid.uidByte, rfid.uid.size);

   // Serial.println();

    //Serial.print(F("In dec: "));

    //printDec(rfid.uid.uidByte, rfid.uid.size);

    //Serial.println();

  }

  //else Serial.println(F("Card read previously."));

 

  // Halt PICC

  rfid.PICC_HaltA();

 

  // Stop encryption on PCD

  rfid.PCD_StopCrypto1();

}

 

 

/**

 * Helper routine to dump a byte array as hex values to Serial.

 */

void printHex(byte *buffer, byte bufferSize) {

  for (byte i = 0; i < bufferSize; i++) {

    Serial.print(buffer[i] < 0x10 ? " 0" : " ");

    Serial.print(buffer[i], HEX);

  }

}

 

/**

 * Helper routine to dump a byte array as dec values to Serial.

 */

void printDec(byte *buffer, byte bufferSize) {

  for (byte i = 0; i < bufferSize; i++) {

    Serial.print(buffer[i] < 0x10 ? " 0" : " ");

    Serial.print(buffer[i], DEC);

  }

}
